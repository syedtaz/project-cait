var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Initiate the Julia REPL by calling julia from the terminal (make sure your PATH is set correctly) or launching the Julia application. ","category":"page"},{"location":"algorithm/#Algorithm","page":"Algorithm","title":"Algorithm","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Currently the package supports a delayed stochastic simulation system using a modified next reaction method to model the zebrafish MRNA concentrations. Please see Ay & Ozubdak[1] for more details on the research project – this page only contains a brief overview.","category":"page"},{"location":"algorithm/#Next-Reaction-Method","page":"Algorithm","title":"Next Reaction Method","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Please see Anderson[2] for a theoretical and language agnostic discussion on the algorithm implemented in this package. ","category":"page"},{"location":"algorithm/#Terminology","page":"Algorithm","title":"Terminology","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"t refers to the current time in the system\nFor any reaction k\nP_k refers to the propensity of the reaction\nT_k refers to the internal time  the reaction\na_k refers to the propensity function  the reaction\nr_k refers to the mathcalU(01) random number generated for  the reaction\nS_k refers to the completion time channel of the reaction (only if it is a delayed reaction)\nND refers to reactions that have no delays. Their effects are applied immediately.\nCD refer to reactions that have a delay but their change is applied when the reaction is completed.\nICD refers to reactions that change the state of the system both when they initiate and when they complete.","category":"page"},{"location":"algorithm/#Pseudocode","page":"Algorithm","title":"Pseudocode","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Set the initial number of reactants and set t=0. For every reaction k, set P_k and T_k to zero and initialize S_k = infty if it is a delayed reaction.\nFor each reaction k,\nCalculate the propensity functions a_k.\nGenerate r_k and set P_k = lndfrac1r_k.\nSet Delta t_k = (P_k - T_k)a_k\nSet Delta = min(Delta t_k s_k(1) - t)\nIncrement t by Delta.\nLet mu be the reaction we chose. \nIf we are completing a ICD reaction apply the effect of the reaction and delete the first element of s_mu.\nIf we are initiating a non-delayed reaction, apply the effect of the reaction immediately.\nIf we are initiating a CD reaction, update s_mu by inserting t + tau_mu into s_mu in the second to last position.\nIf we are initiating an ICD reaction, apply the initiation effects of the reaction and update s_mu by inserting t + tau_mu into s_mu in the second to last position.\nFor each reaction k, set T_k = T_k + a_k cdot Delta. \nIf reaction mu was initiated, let r be mathcalU(01) and increment P_mu by lndfrac1r.\nGo to step 2, or quit.","category":"page"},{"location":"algorithm/#Rejection-/-Direct-Method","page":"Algorithm","title":"Rejection / Direct Method","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"These algorithms were tried out but were not generally as fast or readable as NRM. Stable and efficient versions be added in the future.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"[1]: Ay A, Knierer S, Sperlea A, Holland J, Özbudak EM. Short-lived Her proteins drive robust synchronized oscillations in the zebrafish segmentation clock. Development. 2013 Aug;140(15):3244-53. doi: 10.1242/dev.093278. PMID: 23861061.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"[2]: J. Chem. Phys. 127, 214107 (2007); https://doi.org/10.1063/1.2799998","category":"page"},{"location":"#caitlyn.jl","page":"Home","title":"caitlyn.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Code for stochastically simulating oscillatory systems in multicellular models of zebrafish. Current iterations include stable CPU and GPU versions written in Julia. There is also an experimental low-level version in CUDA C. Code by Tazmilur Saad and Ahmet Ay.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is not available on Julia's registries and must be installed manually. You can clone the repository using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/syedtaz/project-cait.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, this package has been tested for Julia 1.5.0 but it should work on the latest releases. Please see this link on how to install Julia. Once installed, you can launch the program by entering the Julia REPL and loading the package using","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> include(\"src/simulator.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will load all of the functions of the package into the REPL scope. If there are dependencies that are not present on your system Julia's package manager will download and precompile them. Since Julia is just-in-time compiled, the first run of any function in the package will trigger compilation and thus will be relatively slower than subsequent runs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Conside looking into Revise.jl and related documentation online on how to manage Julia REPL sessions and compilation times.","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following code will create a 1-cell model with 100 seconds of simulation time using the default reactants and rate parameters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> model = nrm(1,100)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can plot this using Plots.jl. For example, the following code snippet will plot the cell contents vs time, using your system's default plotting backend (GTK+ on macOS). If you are running this code on AWS / any other remote environment, you should use the unicodeplots() backend.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\nplot(model.cells[1].Time, model.cells[1].levels)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is one of the possible outputs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"}]
}
